/*
 * Copyright 2024 CloudWeGo Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Code generated by MockGen. DO NOT EDIT.
// Source: container.go
//
// Generated by this command:
//
//	mockgen -source=container.go -destination=../mock/container_mock.go -package=mock ContainerService
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	model "github.com/cloudwego/eino-ext/devops/internal/model"
	model0 "github.com/cloudwego/eino-ext/devops/model"
	compose "github.com/cloudwego/eino/compose"
	gomock "go.uber.org/mock/gomock"
)

// MockContainerService is a mock of ContainerService interface.
type MockContainerService struct {
	ctrl     *gomock.Controller
	recorder *MockContainerServiceMockRecorder
}

// MockContainerServiceMockRecorder is the mock recorder for MockContainerService.
type MockContainerServiceMockRecorder struct {
	mock *MockContainerService
}

// NewMockContainerService creates a new mock instance.
func NewMockContainerService(ctrl *gomock.Controller) *MockContainerService {
	mock := &MockContainerService{ctrl: ctrl}
	mock.recorder = &MockContainerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContainerService) EXPECT() *MockContainerServiceMockRecorder {
	return m.recorder
}

// AddCustomGraphInfo mocks base method.
func (m *MockContainerService) AddCustomGraphInfo(graphName string, graphInfo *compose.GraphInfo, graphOpt model.GraphOption) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCustomGraphInfo", graphName, graphInfo, graphOpt)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddCustomGraphInfo indicates an expected call of AddCustomGraphInfo.
func (mr *MockContainerServiceMockRecorder) AddCustomGraphInfo(graphName, graphInfo, graphOpt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCustomGraphInfo", reflect.TypeOf((*MockContainerService)(nil).AddCustomGraphInfo), graphName, graphInfo, graphOpt)
}

// AddGlobalGraphInfo mocks base method.
func (m *MockContainerService) AddGlobalGraphInfo(graphName string, graphInfo *compose.GraphInfo, graphOpt model.GraphOption) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddGlobalGraphInfo", graphName, graphInfo, graphOpt)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddGlobalGraphInfo indicates an expected call of AddGlobalGraphInfo.
func (mr *MockContainerServiceMockRecorder) AddGlobalGraphInfo(graphName, graphInfo, graphOpt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddGlobalGraphInfo", reflect.TypeOf((*MockContainerService)(nil).AddGlobalGraphInfo), graphName, graphInfo, graphOpt)
}

// CreateCanvas mocks base method.
func (m *MockContainerService) CreateCanvas(graphID string) (model0.CanvasInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCanvas", graphID)
	ret0, _ := ret[0].(model0.CanvasInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCanvas indicates an expected call of CreateCanvas.
func (mr *MockContainerServiceMockRecorder) CreateCanvas(graphID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCanvas", reflect.TypeOf((*MockContainerService)(nil).CreateCanvas), graphID)
}

// CreateRunnable mocks base method.
func (m *MockContainerService) CreateRunnable(graphID, fromNode string) (model.Runnable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRunnable", graphID, fromNode)
	ret0, _ := ret[0].(model.Runnable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRunnable indicates an expected call of CreateRunnable.
func (mr *MockContainerServiceMockRecorder) CreateRunnable(graphID, fromNode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRunnable", reflect.TypeOf((*MockContainerService)(nil).CreateRunnable), graphID, fromNode)
}

// GetCanvas mocks base method.
func (m *MockContainerService) GetCanvas(graphID string) (model0.CanvasInfo, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCanvas", graphID)
	ret0, _ := ret[0].(model0.CanvasInfo)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetCanvas indicates an expected call of GetCanvas.
func (mr *MockContainerServiceMockRecorder) GetCanvas(graphID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCanvas", reflect.TypeOf((*MockContainerService)(nil).GetCanvas), graphID)
}

// GetGraphInfo mocks base method.
func (m *MockContainerService) GetGraphInfo(graphID string) (model.GraphInfo, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGraphInfo", graphID)
	ret0, _ := ret[0].(model.GraphInfo)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetGraphInfo indicates an expected call of GetGraphInfo.
func (mr *MockContainerServiceMockRecorder) GetGraphInfo(graphID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGraphInfo", reflect.TypeOf((*MockContainerService)(nil).GetGraphInfo), graphID)
}

// GetRunnable mocks base method.
func (m *MockContainerService) GetRunnable(graphID, fromNode string) (model.Runnable, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRunnable", graphID, fromNode)
	ret0, _ := ret[0].(model.Runnable)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetRunnable indicates an expected call of GetRunnable.
func (mr *MockContainerServiceMockRecorder) GetRunnable(graphID, fromNode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRunnable", reflect.TypeOf((*MockContainerService)(nil).GetRunnable), graphID, fromNode)
}

// ListGraphs mocks base method.
func (m *MockContainerService) ListGraphs() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGraphs")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// ListGraphs indicates an expected call of ListGraphs.
func (mr *MockContainerServiceMockRecorder) ListGraphs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGraphs", reflect.TypeOf((*MockContainerService)(nil).ListGraphs))
}
