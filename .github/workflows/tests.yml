name: EinoExtTest

on:
  pull_request:
  push:
    branches:
      - main

jobs:
  unit_test:
    name: "eino ext test"
    runs-on: ubuntu-latest
    env:
      COVERAGE_FILE: coverage.out
      BREAKDOWN_FILE: base.coverage
    steps:
      - uses: actions/checkout@v4
      - name: "Set up Go"
        uses: actions/setup-go@v5
        with:
          go-version: "1.22"
      - name: go test for every module
        run: |
          modules=`find . -name "go.mod" -exec dirname {} \;`
          echo $modules
          coverprofiles=""
          for module in $modules; do
            go test -race -coverprofile=${module}/${COVERAGE_FILE} -gcflags="all=-l -N" -coverpkg=${module}/... ${module}/...
            coverprofiles="${module}/${COVERAGE_FILE},$coverprofiles"
          done
          echo "COVERAGE_PROFILES=$coverprofiles" >> $GITHUB_ENV
          
      - name: download base.coverage for diff coverage rate
        id: download-base-coverage
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          name: ${{ env.BREAKDOWN_FILE }}

      - name: calculate coverage
        uses: vladopajic/go-test-coverage@v2
        with:
          profile: ${{env.COVERAGE_PROFILES}}
          config: ./.testcoverage.yml
          breakdown-file-name: ${{ github.ref_name == 'main' && env.BREAKDOWN_FILE || '' }}
          diff-base-breakdown-file-name: ${{ steps.download-base-coverage.outcome == 'success' && env.BREAKDOWN_FILE || '' }}
          
      - name: Upload Artifact (main.breakdown)
        uses: actions/upload-artifact@v4
        if: github.ref_name == 'main'
        with:
          name: main.breakdown
          path: main.breakdown # as specified via `breakdown-file-name`
          if-no-files-found: error
      - name: find if coverage report is already present
        if: ${{ github.event.pull_request.number != null }}
        uses: peter-evans/find-comment@v3
        id: find-comment
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: 'github-actions[bot]'
          body-includes: 'go-test-coverage report:'
      - name: post coverage report
        if: ${{ github.event.pull_request.number != null }}
        uses: peter-evans/create-or-update-comment@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.pull_request.number }}
          comment-id: ${{ steps.find-comment.outputs.comment-id || '' }}
          edit-mode: replace
          body: |
            go-test-coverage report:
            ```
            ${{ steps.coverage.outputs.report && fromJSON(steps.coverage.outputs.report) || 'No coverage report available' }} ```

      - name: "finally check coverage"
        if: steps.coverage.outcome == 'failure'
        shell: bash
        run: echo "coverage check failed" && exit 1
  unit-benchmark-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: stable

      - name: Go BenchMark
        run: |
          modules=`find . -name "go.mod" -exec dirname {} \;`
          echo $modules
          list=""
          coverpkg=""
          if [[ ! -f "go.work" ]];then go work init;fi
          for module in $modules; do go work use $module; list=$module"/... "$list; coverpkg=$module"/...,"$coverpkg; done
          go work sync
          go test -bench=. -run=none -gcflags="all=-N -l" $list