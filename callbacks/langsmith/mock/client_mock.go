// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package mock_langsmith is a generated GoMock package.
package mock

import (
	context "context"
	"github.com/ershixionge/eino-ext-langsmith/callbacks/langsmith"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockLangsmith is a mock of Langsmith interface.
type MockLangsmith struct {
	ctrl     *gomock.Controller
	recorder *MockLangsmithMockRecorder
}

// MockLangsmithMockRecorder is the mock recorder for MockLangsmith.
type MockLangsmithMockRecorder struct {
	mock *MockLangsmith
}

// NewMockLangsmith creates a new mock instance.
func NewMockLangsmith(ctrl *gomock.Controller) *MockLangsmith {
	mock := &MockLangsmith{ctrl: ctrl}
	mock.recorder = &MockLangsmithMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLangsmith) EXPECT() *MockLangsmithMockRecorder {
	return m.recorder
}

// CreateRun mocks base method.
func (m *MockLangsmith) CreateRun(ctx context.Context, run *langsmith.Run) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRun", ctx, run)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRun indicates an expected call of CreateRun.
func (mr *MockLangsmithMockRecorder) CreateRun(ctx, run interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRun", reflect.TypeOf((*MockLangsmith)(nil).CreateRun), ctx, run)
}

// UpdateRun mocks base method.
func (m *MockLangsmith) UpdateRun(ctx context.Context, runID string, patch *langsmith.RunPatch) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRun", ctx, runID, patch)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRun indicates an expected call of UpdateRun.
func (mr *MockLangsmithMockRecorder) UpdateRun(ctx, runID, patch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRun", reflect.TypeOf((*MockLangsmith)(nil).UpdateRun), ctx, runID, patch)
}
